What is Concurrency?
    Concurrency is different from parallelism. Concurrency is about dealing with many things at once, but parallelismis about doing many
    things at the same time. Concurrency enables parallelism by designing a correct structure of concurrency work.

Understanding Concurrency
    we can think of the mechanism of a bike. When we pedal, we usually push down the pedal to produce force (and this push, raises our 
    opposite leg on the opposite pedal). We cannot push with both legs at the same time because the cranks don't allow us to do it. But 
    this design allows the construction of a parallel bike, commonly called a tandem bike. A tandem bike is a bike that two people can 
    ride at the same time; they both pedal and apply force to the bike.

    In the bike example, concurrency is the design of a bike that, with two legs (Go routines), you can produce power to move the bike by 
    yourself. The design is concurrent and correct. If we use a tandem bike and two people (two cores), the solution is concurrent, 
    correct, and parallel. But the key thing is that with a concurrent design, we don't have to worry about parallelism; we can think 
    about it as an extra feature if our concurrent design is correct. In fact, we can use the tandem bike with only one person, but the 
    concurrent design of the legs, pedals, chain, wheels of a bike is still correct.

What are Goroutines?
    In Go, we achieve concurrency by working with Goroutines. They are like processes that run applications in a computer concurrently.
    Goroutines are not threads. We can launch as many Goroutines as required. They are incredibly cheap, with a small growth stack. We
    use Goroutines to execute the code that we want to work concurrently.

Understanding Goroutines
    Returning to the bike analogy, we were pushing the pedals of the bike with our two legs. That's two Goroutines concurrently pushing 
    the pedals. When we use the tandem, we had a total of four Goroutines, possibly working in parallel. But we also have two hands to 
    handle the front and rear brakes. That's a total of eight Goroutines for our two threads bike. Actually, we don't pedal when we brake 
    and we don't brake when we pedal; that's a correct concurrent design. Our nervous system transports the information about when to stop 
    pedaling and when to start braking. In Go, our nervous system is composed of channels.